// √âcouter l'installation du SW
self.addEventListener("install", function (event) {
  console.log("Service Worker install√©");
  self.skipWaiting(); // Prendre le contr√¥le imm√©diatement
});

// √âcouter l'activation du SW
self.addEventListener("activate", function (event) {
  console.log("Service Worker activ√©");
  self.clients.claim(); // Prendre le contr√¥le des pages ouvertes
});

function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("gaming-db", 1); // version 1

    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains("pending-gaming")) {
        db.createObjectStore("pending-gaming", {
          keyPath: "id",
          autoIncrement: true,
        });
        console.log('üìÅ Object store "pending-gaming" cr√©√©');
      }
    };

    request.onsuccess = () => resolve(request.result);
    request.onerror = () => reject(request.error);
  });
}

function getAllPending() {
  return openDB().then((db) => {
    return new Promise((resolve, reject) => {
      const tx = db.transaction("pending-gaming", "readonly");
      const store = tx.objectStore("pending-gaming");
      const req = store.getAll();
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error);
    });
  });
}

const staticCacheName = "my-gaming-site-cache-v1";
const assets = [
  "./",
  "./index.html",
  "./offline.html",
  "./random.html",
  "./open.html",
  "./share.html",
  "./style.css",
  "./app.js",
  "./serviceWorker.js",
  "./manifest.json",
  "./assets/manifest-icon-192.maskable.png",
  "./assets/manifest-icon-512.maskable.png",
];

self.addEventListener("install", function (event) {
  event.waitUntil(
    caches.open(staticCacheName).then(function (cache) {
      console.log("Opened cache");
      return cache.addAll(assets);
    })
  );
});

self.addEventListener("activate", function (event) {
  const cacheWhitelist = [staticCacheName];
  event.waitUntil(
    caches.keys().then((keys) => {
      return Promise.all(
        keys
          .filter((k) => !cacheWhitelist.includes(k))
          .map((k) => caches.delete(k))
      );
    })
  );
});

self.addEventListener("fetch", (event) => {
  console.log("üõ∞ Fetch:", event.request.url);

  const request = event.request;

  // Toujours construire un objet URL depuis request.url
  let url;

  url = new URL(request.url);

  console.log("üõ∞ Interception Fetch:", request.method, url.pathname);

  event.respondWith(caches.match(request).then((res) => res || fetch(request)));
});

// √âcouter cet √©v√©nement dans le SW (serviceWorker.js)
// Ton service worker sera r√©veill√© m√™me si la page est ferm√©e, et fera la sync.

//  Code √† trous (dans serviceWorker.js)

self.addEventListener("sync", (event) => {
  console.log("üì° Sync d√©clench√©e pour:", event.tag);
  if (event.tag === "sync-participants") {
    // indice: le m√™me tag que plus haut
    event.waitUntil(syncParticipants()); // indice: dire "attends la fin de cette promesse"
  }
});
//  La fonction syncParticipants qui lit IndexedDB et envoie au serveur
// D√©j√† √©crite dans ton code :

// elle utilise getAllPending() pour r√©cup√©rer les snacks,

// les POST au serveur,

// puis supprime de IndexedDB apr√®s succ√®s.

// üîç Comment tester dans DevTools ?
// Va dans :

// Application > Service Workers
// Clique sur ¬´ Sync ¬ª, et mets ton tag :

// sync-snacks
// puis clique sur Trigger.

// Dans la Console, tu dois voir :

// Sync d√©clench√©e pour: sync-snacks
// D√©but de la synchronisation...
// Tentative de synchro pour : ...

/**
 * Fonction asynchrone de synchronisation des snacks
 * Cette fonction :
 * - r√©cup√®re tous les snacks stock√©s localement (dans IndexedDB) qui n'ont pas encore √©t√© envoy√©s au serveur,
 * - les envoie un par un via une requ√™te HTTP POST en JSON √† une API serveur,
 * - supprime localement les snacks qui ont bien √©t√© re√ßus par le serveur,
 * - notifie les autres onglets/pages ouvertes du succ√®s ou des erreurs,
 * - affiche un rapport de la synchronisation √† la fin,
 * - g√®re proprement les erreurs r√©seau et serveur.
 */
async function syncParticipants() {
  // Log dans la console pour indiquer le d√©but de la synchronisation
  console.log("üîÑ D√©but de la synchronisation...");

  try {
    // 1Ô∏è‚É£ R√©cup√©ration des snacks en attente dans IndexedDB (base locale du navigateur)
    // getAllPending() est une fonction asynchrone qui retourne un tableau de snacks non synchronis√©s
    const pending = await getAllPending();
    console.log(`üìä ${pending.length} participants(s) √† synchroniser`);

    // Si aucun snack √† synchroniser, on sort directement de la fonction (pas besoin de faire plus)
    if (pending.length === 0) {
      console.log("‚úÖ Aucun participant en attente");
      return; // Fin de la fonction ici
    }

    // 2Ô∏è‚É£ Initialisation de compteurs pour suivre succ√®s/√©checs
    let success = 0,
      fail = 0;
    // Tableau pour garder les snacks qui n'ont pas pu √™tre synchronis√©s, avec d√©tail de l'erreur
    const failedParticipants = [];

    // 3Ô∏è‚É£ Boucle asynchrone pour traiter chaque snack un par un
    for (const participant of pending) {
      try {
        console.log("üöÄ Tentative de synchro pour :", participant.name);

        // R√©cup√©ration de l'URL de l'API via une fonction d√©di√©e pour g√©rer diff√©rents environnements (local, prod...)
        const apiUrl = getApiUrl();
        console.log("üåê URL API utilis√©e:", apiUrl);

        // Envoi de la requ√™te HTTP POST vers l'API
        // fetch() est une API JavaScript moderne pour faire des requ√™tes HTTP asynchrones
        // Ici on envoie les donn√©es au format JSON (headers et body)
        const response = await fetch(apiUrl, {
          method: "POST", // M√©thode HTTP POST pour envoyer des donn√©es
          headers: {
            // En-t√™tes HTTP pour indiquer le type de contenu
            "Content-Type": "application/json", // Le corps de la requ√™te est en JSON
            Accept: "application/json", // On attend une r√©ponse en JSON
          },
          body: JSON.stringify({
            // Conversion des donn√©es JavaScript en cha√Æne JSON
            name: participant.name, // Propri√©t√© 'name' du snack
            role: participant.role, // Propri√©t√© 'mood' du snack (ex: humeur)
            timestamp: snack.timestamp, // Date/heure de cr√©ation ou modification
          }),
        });

        // Log du statut HTTP re√ßu : status est un entier (ex: 200), statusText est une description (ex: OK)
        console.log(
          "üìä R√©ponse serveur:",
          response.status,
          response.statusText
        );

        if (response.ok) {
          // Si le serveur r√©pond avec un code HTTP 2xx (succ√®s), on consid√®re la synchro r√©ussie
          console.log("‚úÖ Snack synchronis√© :", participant.name);

          // Suppression du snack de IndexedDB pour √©viter les doublons √† l'avenir
          // deletePendingSnack() est une fonction asynchrone qui supprime par identifiant
          await deletePendingSnack(participant.id);

          // Notification aux autres onglets/pages que ce snack a √©t√© synchronis√©
          // Utile pour mettre √† jour l'affichage en temps r√©el dans plusieurs fen√™tres
          await notifyClients("snack-synced", { participant });

          success++; // Incr√©mentation du compteur de succ√®s
        } else {
          // Si la r√©ponse HTTP est autre que 2xx (ex: erreur 404, 500)
          // On tente de lire le corps de la r√©ponse pour r√©cup√©rer un message d'erreur
          const errorText = await response
            .text()
            .catch(() => "Erreur inconnue");

          // Log d√©taill√© de l'erreur serveur
          console.error(
            `‚ùå Erreur serveur ${response.status} pour : ${participant.name}`,
            errorText
          );

          // On ajoute ce snack √† la liste des snacks ayant √©chou√© la synchro, avec le message d'erreur
          failedParticipants.push({
            snack: participant.name,
            error: `${response.status}: ${errorText}`,
          });

          fail++; // Incr√©mentation du compteur d'√©checs
        }
      } catch (err) {
        // Gestion des erreurs li√©es au r√©seau (ex: pas d'acc√®s Internet, timeout)
        console.error(
          `‚ùå Erreur r√©seau pour : ${participant.name}`,
          err.message
        );

        // On garde aussi trace de ces erreurs dans le tableau des √©checs
        failedParticipants.push({
          participant: participant.name,
          error: err.message,
        });

        fail++; // Incr√©mentation du compteur d'√©checs
      }
    }

    // 4Ô∏è‚É£ Apr√®s traitement de tous les snacks, on affiche un bilan clair
    console.log(`üìà Sync termin√©e : ${success} succ√®s / ${fail} √©checs`);

    // Si certains snacks n'ont pas pu √™tre synchronis√©s, on affiche la liste avec erreurs
    if (failedParticipants.length > 0) {
      console.log("‚ùå Snacks √©chou√©s:", failedParticipants);
    }

    // Notification g√©n√©rale aux autres onglets/pages que la synchronisation est termin√©e
    // On transmet le nombre de succ√®s, d'erreurs, et les d√©tails des √©checs
    await notifyClients("sync-completed", {
      success,
      errors: fail,
      failedParticipants: failedParticipants,
    });
  } catch (e) {
    // Gestion d'erreurs globales pouvant survenir dans tout le bloc try (ex: erreur IndexedDB)
    console.error("üí• Erreur globale dans syncParticipants :", e);

    // Notification des autres onglets/pages qu'il y a eu une erreur globale
    await notifyClients("sync-error", { error: e.message });

    // Relance de l'erreur pour que le code qui a appel√© syncParticipants puisse aussi la g√©rer
    throw e;
  }
}

/**
 * Fonction utilitaire pour d√©terminer dynamiquement l'URL de l'API en fonction de l'environnement
 * ----------------------------------------------------------------------------------------------
 * Utilise l'objet URL et self.location.href pour r√©cup√©rer l'URL compl√®te de la page courante
 * Puis analyse le hostname pour retourner :
 * - une URL locale pour localhost/127.0.0.1,
 * - une URL adapt√©e pour Netlify (fonctions serverless),
 * - une URL de production par d√©faut.
 */
function getApiUrl() {
  // Cr√©ation d'un objet URL pour analyser proprement l'URL courante
  const currentUrl = new URL(self.location.href);
  // Si on est en local (dev sur machine locale)
  if (
    currentUrl.hostname === "localhost" ||
    currentUrl.hostname === "127.0.0.1"
  ) {
    // Retourne l'URL locale pour l'API, sur le m√™me port que le front-end
    return `${currentUrl.origin}/api/gaming`;
  }
  // Si on est d√©ploy√© sur Netlify (URL contenant "netlify.app")
  if (currentUrl.hostname.includes("netlify.app")) {
    // Retourne l'URL de la fonction serverless h√©berg√©e sur Netlify
    return `${currentUrl.origin}/.netlify/functions/gaming`;
  }
  // Sinon on retourne une URL de production fixe (exemple : site Netlify principal)
  return "https://gmaing.netlify.app/.netlify/functions/gaming";
}
